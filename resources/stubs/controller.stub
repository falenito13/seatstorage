<?php

namespace DummyNamespace;

use App\Utilities\ServiceResponse;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use DummyCreateRequest as CreateRequest;
use DummyModuleRepository as ModuleRepository;
use DummyBaseController as BaseController;

class DummyClass extends BaseController
{

    /**
     * @var string
     */
    public $moduleTitle = 'DummyModuleKey';

    /**
     * @var string
     */
    public $viewFolderName = 'DummyModuleKey';

    /**
     * DummyClass constructor.
     */
    public function __construct()
    {
        parent::__construct();
        $this->successCreateText = $this->moduleTitle . $this->successCreateText;
        $this->successUpdateText = $this->moduleTitle . $this->successUpdateText;
        $this->successDeleteText = $this->moduleTitle . $this->successDeleteText;
        $this->baseData['moduleKey'] = 'DummyModuleKey';
    }


    /**
     * Display a listing of the resource.
     *
     * @param Request $request
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request)
    {
        $this->baseData['allData'] = ModuleRepository::paginate(25);

        return view($this->baseModuleName   . $this->baseAdminViewName . $this->viewFolderName.'.index', $this->baseData);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        return view($this->baseModuleName  . $this->baseAdminViewName . $this->viewFolderName.'.create', $this->baseData);
    }

    /**
     * @param CreateRequest $request
     * @return \Illuminate\Http\RedirectResponse
     */
    public function store(CreateRequest $request)
    {
        try {
            ModuleRepository::create($request->except('_token'));

        } catch (\Exception $ex) {
            return redirect()->back()->with('notifications', ServiceResponse::notification($ex->getMessage(), 'danger'))->withInput();
        }

        return redirect()->back()->with('notifications', ServiceResponse::notification($this->successCreateText, 'success'));
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        $this->baseData['data'] = ModuleRepository::findOrFail($id);

        return view($this->baseModuleName  . $this->baseAdminViewName . $this->viewFolderName.'.edit', $this->baseData);
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  CreateRequest  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(CreateRequest $request, $id)
    {
        try {
            ModuleRepository::update($request->except('_token'),$id);
        } catch (\Exception $ex) {
            return redirect()->back()->with('notifications', ServiceResponse::notification($ex->getMessage(), 'danger'))->withInput();
        }

        return redirect()->back()->with('notifications', ServiceResponse::notification($this->successUpdateText, 'success'));
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        try {
            ModuleRepository::findOrFail($id)->delete($id);
        } catch (\Exception $ex) {
            return redirect()->back()->with('notifications', ServiceResponse::notification($ex->getMessage(), 'danger'))->withInput();
        }

        return redirect()->back()->with('notifications', ServiceResponse::notification($this->successUpdateText, 'success'));
    }

}
